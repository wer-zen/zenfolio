<div class="h-screen w-screen bg-transparent z-30" id="container"></div>

<script type="module">
    import * as THREE from "../../assets/three/build/three.module.js";
    import { OrbitControls } from "../../assets/three/examples/jsm/controls/OrbitControls.js";

    var vertexShader = `
        varying vec2 vUv;
        void main()	{
          vUv = uv;
          gl_Position = projectionMatrix * modelViewMatrix * vec4(position,1.0);
        }
      `;
    var fragmentShader = `
		//#extension GL_OES_standard_derivatives : enable

        varying vec2 vUv;
        uniform float thickness;

        float edgeFactor(vec2 p){
        	vec2 grid = abs(fract(p - 0.5) - 0.5) / fwidth(p) / thickness;
      		return min(grid.x, grid.y);
        }

        void main() {

          float a = edgeFactor(vUv);

          vec3 c = mix(vec3(1), vec3(0), a);

          gl_FragColor = vec4(c, 1.0);
        }
      `;

    export default class Sketch {
        constructor(options) {
            this.container = options.domElement;
            this.width = this.container.offsetWidth;
            this.height = this.container.offsetHeight;

            this.scene = new THREE.Scene();
            this.camera = new THREE.PerspectiveCamera(
                75,
                this.height / this.width,
                0.1,
                10,
            );

            this.renderer = new THREE.WebGLRenderer({
                alpha: true,
                antialias: true,
            });
            this.renderer.setClearColor(0x000000, 0); // black, fully transparent
            this.container.appendChild(this.renderer.domElement);
            this.controls = new OrbitControls(
                this.camera,
                this.renderer.domElement,
            );
            this.renderer.setPixelRatio(2);
            this.camera.position.z = 5;
            this.time = 0;
            this.resize();
            this.addObjects();
            this.render();
            this.setupResize();
        }

        resize() {
            this.width = this.container.clientWidth;
            this.height = this.container.clientHeight;
            this.renderer.setSize(this.width, this.height);
            this.camera.aspect = this.width / this.height;
            this.camera.updateProjectionMatrix();
        }

        addObjects() {
            this.geometry = new THREE.BoxGeometry(1, 1, 1);
            this.material = new THREE.ShaderMaterial({
                uniforms: {
                    thickness: {
                        value: 1,
                    },
                },
                vertexShader: vertexShader,
                fragmentShader: fragmentShader,
            });

            this.mesh = new THREE.Mesh(this.geometry, this.material);
            this.scene.add(this.mesh);
        }

        setupResize() {
            window.addEventListener("resize", this.resize.bind(this));
        }

        render() {
            this.time += 0.05;

            this.mesh.rotation.x += 0.01;
            this.mesh.rotation.y += 0.01;
            this.renderer.render(this.scene, this.camera);

            requestAnimationFrame(this.render.bind(this));
        }
    }

    new Sketch({
        domElement: document.getElementById("container"),
    });
</script>
